const fs = require('fs');
const toml = require('toml');
const tomlify = require('tomlify-j0.4');
const concat = require('concat-stream');

// ETH host info
const ethHost = process.env.ETH_HOSTNAME;
const ethWsPort = process.env.ETH_WS_PORT;
const ethURL = process.env.ETH_URL || ethHost.replace('http://', 'ws://') + ':' + ethWsPort
const ethNetworkId = process.env.ETH_NETWORK_ID;

/*
Each <contract.json> file is sourced directly from the InitContainer.  Files are generated by
Truffle during contract migration and copied to the InitContainer image via Circle.
*/

// const ecdsaKeepFactoryJsonFile = '/tmp/ECDSAKeepFactory.json';
// const ecdsaKeepFactoryParsed = JSON.parse(fs.readFileSync(ecdsaKeepFactoryJsonFile));
// const ecdsaKeepFactoryContractAddress = ecdsaKeepFactoryParsed.networks[ethNetworkId].address;
const ecdsaKeepFactoryContractAddress = "0x7b20cac2F36F0b8c731e288917b654bB2048D8cc"

async function provisionKeepTecdsa() {

  try {

    console.log('###########  Provisioning keep-tecdsa! ###########');
    console.log('\n<<<<<<<<<<<< Creating keep-tecdsa Config File >>>>>>>>>>>>');
    await createKeepTecdsaConfig();
    console.log("\n########### keep-tecdsa Provisioning Complete! ###########");
  }
  catch (error) {
    console.error(error.message);
    throw error;
  }
};

async function createKeepTecdsaConfig() {

  fs.createReadStream('/tmp/keep-tecdsa-template.toml', 'utf8').pipe(concat(function (data) {
    let parsedConfigFile = toml.parse(data);

    parsedConfigFile.ethereum.URL = ethURL;

    parsedConfigFile.ethereum.account.KeyFile = process.env.KEEP_TECDSA_ETH_KEYFILE
    parsedConfigFile.ethereum.ContractAddresses.ECDSAKeepFactory = ecdsaKeepFactoryContractAddress;

    parsedConfigFile.Storage.DataDir = process.env.KEEP_DATA_DIR;

    fs.writeFile('/mnt/keep-tecdsa/config/keep-tecdsa-config.toml', tomlify.toToml(parsedConfigFile), (error) => {
      if (error) throw error;
    });
  }));

  console.log("keep-tecdsa config written to /mnt/keep-tecdsa/config/keep-tecdsa-config.toml");
};

provisionKeepTecdsa().catch(error => {
  console.error(error);
  process.exit(1);
});
